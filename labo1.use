-- TP1 - USE
-- Auteur: Daniel Desroches
-- Date: 3 fev 2015
--
-- Fichier: labo1.use
--
-- Description:
--

--

model convois

-- ============
-- Enumerations
-- ============

-- definis les types de temps possible
enum WeatherType {cloudy, raining, snowing, sunny}

-- =======
-- classes
-- =======

-- ensemble de voies exclusivement reservee a la
-- circulation des vehicules
class Highway
attributes
  Length : Integer
  MaxSpeed : Integer
  MinSpeed : Integer
end

-- voie exclusivement reservee a la circulation
-- des vehicules
class Lane
attributes
end

-- obstacle se trouvant sur une voie pour obstruer
-- la voie des vehicules
class Object
attributes
  Position : Integer
end

-- lieu ou se dirige un vehicule
class Destination
attributes
  Position : Integer
  hasGaz : Boolean
end

-- s'occupe de la reparation et entretien d'un vehicule
class Garage < Destination
attributes
end

-- moyen de transport motorise

-- startConvoy
-- permet de demarrer un convoi de voiture
class Vehicle < Object
attributes
  Speed : Integer
  FuelLevel : Real
  Following : Vehicle
  FollowedBy : Vehicle
  Navi : Navigator
operations
  startConvoy(vehicle:Vehicle)
  begin
    self.Following := vehicle;
    vehicle.FollowedBy := self;
    vehicle.Navi.isAlive := true;
  end
  pre VehicleStartingNotFollowing: self.Following.isUndefined
  pre VehicleStartingNotFollowed: self.FollowedBy.isUndefined
  pre VehicleStartingNoNavigator: self.Navi.isAlive = false
  pre VehicleEntryNotFollowing: vehicle.Following.isUndefined
  pre VehicleEntryNoNavigator: vehicle.Navi.isAlive = false
  post VehicleStartedNotFollowing: self.Following.isUndefined
  post VehicleStartedFollowed: self.FollowedBy = vehicle
  post VehicleStartedNoNavigator: self.Navi.isAlive = false
  post VehicleEnteredFollowing: vehicle.Following = self
  post VehicleEnteredNavigatorOn: vehicle.Navi.isAlive=true
  
  LeaveConvoy()
  begin
    self.Following.FollowedBy := null;
    self.Following := null;
    self.Navi.isAlive := false;
  end
  pre VehicleIsFollowing: self.Following.isUndefined = false
  pre VehicleHeadFollowed: self.Following.FollowedBy = self
  pre VehicleStartedNoNavigator: self.Navi.isAlive = true
  post VehicleHeadNotLongerFollowed: not Vehicle.allInstances->exists(v | v.Following = self)
  post VehicleLeavingNoNavigator: self.Navi.isAlive = false
  post VehicleLeavingNotFollowing: self.FollowedBy.isUndefined
end

-- une facon unique d'identifier un vehicule a cause
-- de son style personnel
class Brand
attributes
  Length : Integer
end

-- permet a l'utilisateur de ce faire guider automatiquement
-- vers sa destination
class Navigator
attributes
  CruiseSpeed : Integer
  isAlive : Boolean
end
 
-- etat du temps exterieur qui permet de definir
-- la distance de securite que les vehicules
-- doivent prendre
class GlobalWeather
attributes
  SafeDistanceRatio : Real
operations
  calculateSafeDistance (weaterType:WeatherType) : Real =
    if weaterType=#cloudy or weaterType=#sunny then
      1.0
    else
      if weaterType=#raining then
        0.9
      else
        0.75
      endif
    endif
end

-- detecteur qui dit au conducteur du vehicule
-- si son moteur a un probleme et il doit arreter
-- dans un garage
class CheckEngine
attributes
  isOk : Boolean
end

-- ==========
-- Contraints
-- ==========

constraints

-- en aucun temps, un objet dans une ligne peut avoir la même position 
-- qu'un autre objet.
context Lane inv NoObjectsCollide:
  self.objects->asSet()->size() = self.objects->asBag()->size()

-- Un véhicule ne peut aller plus rapidement que la limite de vitesse
-- de l'autoroute le permet.
context Vehicle inv RespectMaxSpeed:
  self.Speed <= self.lane.highway.MaxSpeed

-- Un véhicule qui a un autre véhicule qui le suit, se doit d'avoir
-- lui-même en tant que véhicule de tête pour le véhicule qui le suit.
context Vehicle inv FollowedByTheFollowing:
  self.FollowedBy.isUndefined=false implies self.FollowedBy.Following = self

-- En aucun temps, deux véhicules ne peuvent être suivi par le même véhicule.
context Vehicle inv NotFollowedByTheSameVehicle:
  Vehicle.allInstances->collect(v | v.FollowedBy)->size() = Vehicle.allInstances->collect(v | v.FollowedBy)->asSet()->size() 
  
  
-- En aucun temps, deux véhicules ne peuvent suivre le même véhicule.
context Vehicle inv NotFollowingTheSameVehicle:
  Vehicle.allInstances->collect(v | v.Following)->size() = Vehicle.allInstances->collect(v | v.Following)->asSet()->size() 
  
-- Un véhicule qui suit un autre véhicule, se doit d'avoir
-- lui-même en tant que véhicule suivant le véhicule de tête.
context Vehicle inv FollowingTheFollowedBy:
  self.Following.isUndefined=false implies self.Following.FollowedBy = self
  
-- Un véhicule suivant un autre doit avoir son navigateur actif.
context Vehicle inv NaviOnWhileFollowing:
  self.Following.isUndefined=false implies self.Navi.isAlive=true
  
-- ============
-- Associations
-- ============

association Lanes between
  Highway[1] role highway
  Lane[1..*] role lanes
end

association Objects between
  Lane[1] role lane
  Object[*] role objects
end

association Destinations between
  Lane[1] role lane
  Destination[*] role destinations
end

association canRepair between
  Garage[1] role mechanic
  Brand[1..*] role brands
end

association FollowedBy between
  Vehicle[0..1] role head
  Vehicle[0..1] role followed
end

association Following between
  Vehicle[0..1] role following
  Vehicle[0..1] role frontcar
end

association Navigator between
  Vehicle[1] role installation
  Navigator[1] role navigator
end

association Brand between
  Vehicle[1] role vehicle
  Brand[1] role brand
end

association Destination between
  Navigator[1] role mobile
  Destination[1] role destination
end

association CheckEngine between
  Navigator[1] role commander
  CheckEngine[1] role checkengine
end

association GlobalWeather between
  Navigator[1] role commander
  GlobalWeather[1] role weathersystem
end
